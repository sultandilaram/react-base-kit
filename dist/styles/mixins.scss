$breakpoints: (
  "": 0px,
  "desktop": 1920px,
  "laptop": 1280px,
  "tablet": 768px,
  "phone": 375px,
);

@mixin breakpoint($breakpoint) {
  @if $breakpoint != "" {
    @media screen and (max-width: map_get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @content;
  }
}

// ----- Alignments -----

@mixin margin($prefix, $value) {
  .#{$prefix}m {
    @if $value == 1 {
      &-auto {
        margin: auto;
      }
      &x-auto {
        margin-left: auto;
        margin-right: auto;
      }
      &y-auto {
        margin-top: auto;
        margin-bottom: auto;
      }
      &l-auto {
        margin-left: auto;
      }
      &r-auto {
        margin-right: auto;
      }
      &b-auto {
        margin-bottom: auto;
      }
      &t-auto {
        margin-top: auto;
      }
    }

    &-#{$value} {
      margin: calc((#{$value} / 10) * 1rem);
      &px {
        margin: calc((#{$value} / 10) * 1px);
      }
    }
    &#{$value} {
      margin: $value * 1rem;

      &px {
        margin: $value * 1px;
      }
    }

    &x#{$value} {
      margin-left: $value * 1rem;
      margin-right: $value * 1rem;
      &px {
        margin-left: $value * 1px;
        margin-right: $value * 1px;
      }
    }
    &x-#{$value} {
      margin-left: calc((#{$value} / 10) * 1rem);
      margin-right: calc((#{$value} / 10) * 1rem);
      &px {
        margin-left: calc((#{$value} / 10) * 1px);
        margin-right: calc((#{$value} / 10) * 1px);
      }
    }

    &y#{$value} {
      margin-top: $value * 1rem;
      margin-bottom: $value * 1rem;
      &px {
        margin-top: $value * 1px;
        margin-bottom: $value * 1px;
      }
    }
    yx-#{$value} {
      margin-top: calc((#{$value} / 10) * 1rem);
      margin-bottom: calc((#{$value} / 10) * 1rem);
      &px {
        margin-top: calc((#{$value} / 10) * 1px);
        margin-bottom: calc((#{$value} / 10) * 1px);
      }
    }

    &l#{$value} {
      margin-left: $value * 1rem;

      &px {
        margin: $value * 1px;
      }
    }
    &r#{$value} {
      margin-right: $value * 1rem;

      &px {
        margin: $value * 1px;
      }
    }
    &b#{$value} {
      margin-bottom: $value * 1rem;

      &px {
        margin: $value * 1px;
      }
    }
    &t#{$value} {
      margin-top: $value * 1rem;

      &px {
        margin: $value * 1px;
      }
    }
  }
}

@mixin padding($prefix, $value) {
  .#{$prefix}p {
    @if $value == 1 {
      &-auto {
        padding: auto;
      }
      &x-auto {
        padding-left: auto;
        padding-right: auto;
      }
      &y-auto {
        padding-top: auto;
        padding-bottom: auto;
      }
      &l-auto {
        padding-left: auto;
      }
      &r-auto {
        padding-right: auto;
      }
      &b-auto {
        padding-bottom: auto;
      }
      &t-auto {
        padding-top: auto;
      }
    }

    &#{$value} {
      padding: $value * 1rem;
      &px {
        padding: $value * 1px;
      }
    }
    &-#{$value} {
      padding: calc((#{$value} / 10) * 1rem);
      &px {
        padding: calc((#{$value} / 10) * 1px);
      }
    }

    &x#{$value} {
      padding-left: $value * 1rem;
      padding-right: $value * 1rem;
      &px {
        padding-left: $value * 1px;
        padding-right: $value * 1px;
      }
    }
    &x-#{$value} {
      padding-left: calc((#{$value} / 10) * 1rem);
      padding-right: calc((#{$value} / 10) * 1rem);
      &px {
        padding-left: calc((#{$value} / 10) * 1px);
        padding-right: calc((#{$value} / 10) * 1px);
      }
    }

    &y#{$value} {
      padding-top: $value * 1rem;
      padding-bottom: $value * 1rem;
      &px {
        padding-top: $value * 1px;
        padding-bottom: $value * 1px;
      }
    }
    &y-#{$value} {
      padding-top: calc((#{$value} / 10) * 1rem);
      padding-bottom: calc((#{$value} / 10) * 1rem);
      &px {
        padding-top: calc((#{$value} / 10) * 1px);
        padding-bottom: calc((#{$value} / 10) * 1px);
      }
    }

    &l#{$value} {
      padding-left: $value * 1rem;
      &px {
        padding-left: $value * 1px;
      }
    }

    &r#{$value} {
      padding-right: $value * 1rem;
      &px {
        padding-right: $value * 1px;
      }
    }

    &b#{$value} {
      padding-bottom: $value * 1rem;
      &px {
        padding-bottom: $value * 1px;
      }
    }

    &t#{$value} {
      padding-top: $value * 1rem;
      &px {
        padding-top: $value * 1px;
      }
    }
  }
}

@mixin border($prefix, $value) {
  .#{$prefix}b {
    @if $value == 1 {
      &-none {
        border: none;
      }
      &-auto {
        border: auto;
      }
    }

    &#{$value} {
      border: $value * 1px solid var(--border-color);
    }
    &l#{$value} {
      border-left: $value * 1px solid var(--border-color);
    }
    &r#{$value} {
      border-right: $value * 1px solid var(--border-color);
    }
    &b#{$value} {
      border-bottom: $value * 1px solid var(--border-color);
    }
    &t#{$value} {
      border-top: $value * 1px solid var(--border-color);
    }
  }
}

@mixin height_width($prefix, $value) {
  @if $value == 1 {
    .#{$prefix}h-auto {
      height: auto;
    }
    .#{$prefix}w-auto {
      width: auto;
    }
    .#{$prefix}min-h-auto {
      min-height: auto;
    }
    .#{$prefix}min-w-auto {
      min-width: auto;
    }
    .#{$prefix}max-h-auto {
      max-height: auto;
    }
    .#{$prefix}max-w-auto {
      max-width: auto;
    }
  }
  @if $value > 0 and $value <= 100 {
    .#{$prefix}h#{$value} {
      height: $value * 1%;
    }
    .#{$prefix}w#{$value} {
      width: $value * 1%;
    }

    .#{$prefix}vh#{$value} {
      height: $value * 1vh;
    }
    .#{$prefix}vw#{$value} {
      width: $value * 1vw;
    }

    .#{$prefix}min-h#{$value} {
      min-height: $value * 1%;
    }
    .#{$prefix}min-w#{$value} {
      min-width: $value * 1%;
    }

    .#{$prefix}min-vh#{$value} {
      min-height: $value * 1vh;
    }
    .#{$prefix}min-vw#{$value} {
      min-width: $value * 1vw;
    }

    .#{$prefix}max-h#{$value} {
      max-height: $value * 1%;
    }
    .#{$prefix}max-w#{$value} {
      max-width: $value * 1%;
    }

    .#{$prefix}max-vh#{$value} {
      max-height: $value * 1vh;
    }
    .#{$prefix}max-vw#{$value} {
      max-width: $value * 1vw;
    }
  }

  .#{$prefix}h#{$value}px {
    height: $value * 1px;
  }
  .#{$prefix}w#{$value}px {
    width: $value * 1px;
  }

  .#{$prefix}min-h#{$value}px {
    min-height: $value * 1px;
  }
  .#{$prefix}min-w#{$value}px {
    min-width: $value * 1px;
  }

  .#{$prefix}max-h#{$value}px {
    max-height: $value * 1px;
  }
  .#{$prefix}max-w#{$value}px {
    max-width: $value * 1px;
  }
}

@mixin position($prefix, $value) {
  @if $value == 1 {
    .#{$prefix}static {
      position: static;
    }
    .#{$prefix}fixed {
      position: fixed;
    }
    .#{$prefix}absolute {
      position: absolute;
    }
    .#{$prefix}relative {
      position: relative;
    }
    .#{$prefix}sticky {
      position: sticky;
    }
  }

  .#{$prefix}top#{$value} {
    top: $value * 1rem;
    &px {
      top: $value * 1px;
    }
  }
  .#{$prefix}bottom#{$value} {
    bottom: $value * 1rem;
    &px {
      bottom: $value * 1px;
    }
  }
  .#{$prefix}left#{$value} {
    left: $value * 1rem;
    &px {
      left: $value * 1px;
    }
  }
  .#{$prefix}right#{$value} {
    right: $value * 1rem;
    &px {
      right: $value * 1px;
    }
  }
}

@mixin gap($prefix, $value) {
  .#{$prefix}gap#{$value} {
    gap: $value * 1rem;

    &px {
      gap: $value * 1px;
    }
  }
  .#{$prefix}gap-col#{$value} {
    column-gap: $value * 1rem;

    &px {
      column-gap: $value * 1px;
    }
  }
  .#{$prefix}gap-row#{$value} {
    row-gap: $value * 1rem;

    &px {
      row-gap: $value * 1px;
    }
  }
}

@mixin grid-define($prefix, $value) {
  .#{$prefix}cols#{$value} {
    grid-template-columns: repeat($value, 1fr);
  }
  .#{$prefix}rows#{$value} {
    grid-template-rows: repeat($value, 1fr);
  }
}

@mixin grid-position($prefix, $value, $span) {
  .#{$prefix}row#{$value} {
    grid-row: #{$value};
  }
  .#{$prefix}row#{$value}-#{$span} {
    grid-row: #{$value} / span #{$span};
  }
  .#{$prefix}col#{$value} {
    grid-column: #{$value};
  }
  .#{$prefix}col#{$value}-#{$span} {
    grid-column: #{$value} / span #{$span};
  }
}

@mixin display($prefix) {
  .#{$prefix}d {
    &-none {
      display: none;
    }
    &-block {
      display: block;
    }
    &-inline {
      display: inline;
    }
    &-inline-block {
      display: inline-block;
    }
    &-flex {
      display: flex;
      gap: 0.5rem;
    }
    &-inline-flex {
      display: inline-flex;
      gap: 0.5rem;
    }
    &-grid {
      display: grid;
      gap: 0.5rem;
    }
    &-inline-grid {
      display: inline-grid;
      gap: 0.5rem;
    }
    &-table {
      display: table;
    }
    &-table-row {
      display: table-row;
    }
    &-table-cell {
      display: table-cell;
    }
  }
}

@mixin flex($prefix) {
  .#{$prefix}flex {
    &-row {
      flex-direction: row;
      &-reverse {
        flex-direction: row-reverse;
      }
    }
    &-col {
      flex-direction: column;
      &-reverse {
        flex-direction: column-reverse;
      }
    }

    &-none {
      flex: none;
    }
    &-initial {
      flex: 0 1 auto;
    }
    &-auto {
      flex: 1 1 auto;
    }

    &-wrap {
      flex-wrap: wrap;
    }
    &-nowrap {
      flex-wrap: nowrap;
    }

    &-shrink {
      flex-shrink: 1;
    }
    &-noshrink {
      flex-shrink: 0;
    }

    &-grow {
      flex-grow: 1;
    }
    &-nogrow {
      flex-grow: 0;
    }

    @for $i from 0 through 500 {
      &#{$i} {
        flex: $i $i 0%;
      }
    }
  }
}

@mixin align($prefix) {
  .#{$prefix}children-center {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .#{$prefix}content {
    &-center {
      justify-content: center;
    }
    &-start {
      justify-content: flex-start;
    }
    &-end {
      justify-content: flex-end;
    }
    &-between {
      justify-content: space-between;
    }
    &-around {
      justify-content: space-around;
    }
    &-evenly {
      justify-content: space-evenly;
    }
    &-stretch {
      justify-content: stretch;
    }
    &-baseline {
      justify-content: baseline;
    }
    &-space {
      &-between {
        justify-content: space-between;
      }
      &-around {
        justify-content: space-around;
      }
      &-evenly {
        justify-content: space-evenly;
      }
    }
  }
  .#{$prefix}items {
    &-center {
      align-items: center;
    }
    &-start {
      align-items: flex-start;
    }
    &-end {
      align-items: flex-end;
    }
    &-between {
      align-items: space-between;
    }
    &-around {
      align-items: space-around;
    }
    &-evenly {
      align-items: space-evenly;
    }
    &-stretch {
      align-items: stretch;
    }
    &-baseline {
      align-items: baseline;
    }
    &-space {
      &-between {
        align-items: space-between;
      }
      &-around {
        align-items: space-around;
      }
      &-evenly {
        align-items: space-evenly;
      }
    }
  }

  .#{$prefix}self {
    &-center {
      justify-self: center;
      align-self: center;
    }
    &-start {
      justify-self: flex-start;
      align-self: flex-start;
    }
    &-end {
      justify-self: flex-end;
      align-self: flex-end;
    }
    &-between {
      justify-self: space-between;
      align-self: space-between;
    }
    &-around {
      justify-self: space-around;
      align-self: space-around;
    }
    &-evenly {
      justify-self: space-evenly;
      align-self: space-evenly;
    }
    &-stretch {
      justify-self: stretch;
      align-self: stretch;
    }
    &-baseline {
      justify-self: baseline;
      align-self: baseline;
    }
  }
  .#{$prefix}justify-self {
    &-center {
      justify-self: center;
    }
    &-start {
      justify-self: flex-start;
    }
    &-end {
      justify-self: flex-end;
    }
    &-between {
      justify-self: space-between;
    }
    &-around {
      justify-self: space-around;
    }
    &-evenly {
      justify-self: space-evenly;
    }
    &-stretch {
      justify-self: stretch;
    }
    &-baseline {
      justify-self: baseline;
    }
  }
  .#{$prefix}align-self {
    &-center {
      align-self: center;
    }
    &-start {
      align-self: flex-start;
    }
    &-end {
      align-self: flex-end;
    }
    &-between {
      align-self: space-between;
    }
    &-around {
      align-self: space-around;
    }
    &-evenly {
      align-self: space-evenly;
    }
    &-stretch {
      align-self: stretch;
    }
    &-baseline {
      align-self: baseline;
    }
  }

  .#{$prefix}text {
    &-center {
      text-align: center;
    }
    &-left {
      text-align: left;
    }
    &-right {
      text-align: right;
    }
    &-justify {
      text-align: justify;
    }
    &-start {
      text-align: flex-start;
    }
    &-end {
      text-align: flex-end;
    }
  }

  .#{$prefix}overflow {
    &-auto {
      overflow: auto;
    }
    &-visible {
      overflow: visible;
    }
    &-hidden {
      overflow: hidden;
    }
    &-scroll {
      overflow: scroll;
    }
    &-x {
      &-auto {
        overflow-x: auto;
      }
      &-visible {
        overflow-x: visible;
      }
      &-hidden {
        overflow-x: hidden;
      }
      &-scroll {
        overflow-x: scroll;
      }
    }
    &-y {
      &-auto {
        overflow-y: auto;
      }
      &-visible {
        overflow-y: visible;
      }
      &-hidden {
        overflow-y: hidden;
      }
      &-scroll {
        overflow-y: scroll;
      }
    }
  }
}

@mixin gen-color($name, $hue, $saturation, $lightness) {
  --#{$name}-color: hsl(#{$hue}, #{$saturation}, #{$lightness});
  --#{$name}-color-light: hsl(
    #{$hue},
    #{$saturation},
    calc(#{$lightness} + 10%)
  );
  --#{$name}-color-dark: hsl(
    #{$hue},
    #{$saturation},
    calc(#{$lightness} - 10%)
  );
  --#{$name}-color-hover: hsl(
    #{$hue},
    #{$saturation},
    calc(#{$lightness} - 5%)
  );
}

@mixin color($color) {
  .bg-#{$color},
  .active.active-bg-#{$color} {
    background-color: var(--#{$color}-color);

    &-light {
      background-color: var(--#{$color}-color-light);
    }
    &-dark {
      background-color: var(--#{$color}-color-dark);
    }
    &-gradient {
      background: var(--#{$color}-gradient);
    }
  }

  .hover-bg-#{$color} {
    &:hover {
      background-color: var(--#{$color}-color-hover);
    }
    &-light:hover {
      background-color: var(--#{$color}-color-light);
    }
    &-dark:hover {
      background-color: var(--#{$color}-color-dark);
    }
    &-gradient:hover {
      background: var(--#{$color}-gradient);
    }
  }

  .text-#{$color},
  .active.active-text-#{$color} {
    color: var(--#{$color}-color);
    &-light {
      color: var(--#{$color}-color-light);
    }
    &-dark {
      color: var(--#{$color}-color-dark);
    }
  }

  .hover-text-#{$color} {
    &:hover {
      color: var(--#{$color}-color);
    }
    &-light:hover {
      color: var(--#{$color}-color-light);
    }
    &-dark:hover {
      color: var(--#{$color}-color-dark);
    }
  }

  .link-#{$color} {
    color: var(--#{$color}-color);
    &:hover {
      color: var(--#{$color}-color-dark);
    }
  }

  .b-#{$color} {
    border-color: var(--#{$color}-color-dark) !important;
  }

  .btn-#{$color} {
    background-color: var(--#{$color}-color);
    &:hover {
      background-color: var(--#{$color}-color-dark);
    }
  }

  .btn-#{$color}-outline {
    background-color: transparent;
    border: 1px solid var(--#{$color}-color);
    color: var(--#{$color}-color);
    transition: 0.3s;
    &:hover {
      background-color: var(--#{$color}-color);
    }
  }

  .btn-#{$color}-transparent {
    background-color: transparent;
    border: 0;
    color: var(--#{$color}-color);
    transition: 0.3s;
    &:hover {
      background-color: var(--#{$color}-color);
    }
  }
}
